# Фукция - это блок кода, который можно вызывать с разными параметрами (внутри значения, на выходе результат)
# Этап создания функции - нужно обьявить def и дать имя функции и поставить круглые скобки. После функцию нужно вызвать назвав имя и поставив круглые скобки
# При отладке интерпретатор записывает имя функции, и при вызове возвращается в нее
# параметры функции - данные на входе, которые нужно обработать внутри функции (пишется в круглых скобках после def и имени функции)

def greeting(name):
    # Локальное пространство имен
    print("Привет,", name)
# Глобальное пространство имен
names = ["Мария", "Матвей", "Никита", "Любовь"]
for i in names:
    greeting(i)



employees_1 = {
    "Alis" : 100000,
    "Bob" : 99817,
    "Carol" : 122908,
    "Frank" : 88123,
    "Eve" : 93121
}
employees_2 = {
    "Nukita" : 1,
    "Masha" : 110000,
    "Matvey" : 90000,
    "Sasha" : 88123,
    "Tanya" : 193121
}


# ############################### Этап создания функций c print ################################################

def get_topmgrs(empl):
    top_mgrs = [n for n, s in empl.items() if s >= 100000]
    print(top_mgrs)

# Этапы вызова функции
get_topmgrs(employees_1)
get_topmgrs(employees_2)

# Нельзя воспользоваться результатом функции и провести с ней операции


################################ Этап создания функций c return ###############################################

def get_topmgrs(empl):
    return [n for n, s in empl.items() if s >= 100000]


# Этапы вызова функции
print(get_topmgrs(employees_1), get_topmgrs(employees_2))

# Воспользуемся результатом работы функции
# увеличить зарплату в полтора раза
print([employees_1[i]*1.5 for i in get_topmgrs(employees_1)])


############################################## Еще пример ########################################################
# функция которая возвращает несколько значений

def add_root():
    name = 'root'
    uid = 0
    return name, uid

user_name, user_uid = add_root()

print(f'Имя пользователя - {user_name}\nUID пользователя - {user_uid}')



################################## форматированыый вывод строк ##################################################
################################### варианты вывода строк на консоль ############################################
# Вариант №1 через print
print("Имя пользователя -", user_name, "UID пользователя -", user_uid)
# Вариант №2 через format
print("Имя пользователя - {} UID пользователя - {}", format(user_name, user_uid))
# Вариант №3 f - строки
print(f'Имя пользователя - {user_name}\nUID пользователя - {user_uid}')

# пример
# url = f"https://www.ranepa.ru/profile/login={login_name}"


########################################### ПОДРОБНЕЕ О ФУНКЦИЯХ ###############################################

# Функция деления div(x-делимое, y-делитель) -> z-частное
# Если навести на функцию курсор можно увидеть подробное описание. Также можно оборотом """ """ дать самостоятельно ей описание или характкристику, вроде  коментария, которое также будет видна при наведении курсора на функцию

25 // 5 == 5

def divide(dividend, divisor):
    """ Функция divide принимает делимое и делитель в качестве параметров. Возвращает целое частное"""
    quotient = 0

    while dividend > 0:
        dividend -= divisor
        quotient += 1
    return quotient
print("Результат деления:", divide(25, 5))

# Именование и позиционные параметры
def trapezoid_s(a, b, h):
    return h * (a+b) / 2 

S = trapezoid_s(4, h=10, b=6)
print(S)
# в таком случае можно присвоить имя параметру S = trapezoid_s(4, 6, 10) - было S = trapezoid_s(4, h=6, b=10) - стало. Прописываем сначало позиционные потом именнованые.

# Параметр поумолчанию пример
def trapezoid_s(a, b, h):
    return h * (a+b) / 2 

S = trapezoid_s(4, h=10, b=6)
# print(S) - было, а можно записать так:

def trapezoid_s(a, b, h=1):
    return h * (a+b) / 2 

S = trapezoid_s(4, b=6)
print(S)

# Явный вызов именнованых параметров, обозначется в сторе "*,", все парметры после нее будут читаться именнованными
def trapezoid_s(a, b, *, h=1):
    return h * (a+b) / 2 

S = trapezoid_s(4, 6)
S = trapezoid_s(4, 6, h=10)
print(S)

# Произвольное число параметров
# print числовой цыфры, все что угодно
# * args все после print обьеденяет в кортежи, это просто кортеж
def sum_all(*args):
    total = 0
    for i in args:
        total += i

    return total

print(sum_all(1, 2, 3, 4, 5, 100))
